name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Build site with API key
      env:
        DIFY_API_KEY: ${{ secrets.DIFY_API_KEY }}
      run: |
        # Create build directory
        mkdir -p build
        
        # Copy specific directories and files (safer approach)
        cp -r aitools build/ 2>/dev/null || echo "aitools not found, skipping"
        cp -r company build/ 2>/dev/null || echo "company not found, skipping"
        cp -r images build/ 2>/dev/null || echo "images not found, skipping"
        cp -r js build/ 2>/dev/null || echo "js not found, skipping"
        cp -r logo build/ 2>/dev/null || echo "logo not found, skipping"
        
        # Copy HTML files
        cp *.html build/ 2>/dev/null || echo "No HTML files found"
        
        # Copy other important files
        cp *.md build/ 2>/dev/null || echo "No Markdown files found"
        cp CNAME build/ 2>/dev/null || echo "CNAME not found, skipping"
        cp .gitignore build/ 2>/dev/null || echo ".gitignore not found, skipping"
        cp test-deployment.txt build/ 2>/dev/null || echo "test file not found, skipping"
        
        # List current directory contents for debugging
        echo "üìÅ Source directory contents:"
        ls -la
        
        # List build directory contents after copy
        echo "üìÅ Build directory contents after copy:"
        ls -la build/
        
        # Verify API key is available
        echo "üîç Checking API key availability..."
        echo "Environment variables:"
        env | grep -E "(DIFY|API)" || echo "No DIFY/API env vars found"
        
        if [ -z "$DIFY_API_KEY" ]; then
          echo "‚ùå Warning: DIFY_API_KEY environment secret not found"
          echo "‚ö†Ô∏è Proceeding without API key - site will run in development mode"
          # Don't exit, continue with development mode
        else
          echo "‚úÖ API key found (${#DIFY_API_KEY} characters), replacing placeholder..."
        fi
        
        # Check if chatbot.js exists before replacement
        if [ ! -f "build/js/chatbot.js" ]; then
          echo "‚ùå Error: build/js/chatbot.js not found"
          echo "Contents of build/js directory:"
          ls -la build/js/ || echo "build/js directory does not exist"
          exit 1
        fi
        
        # Replace API key placeholder in JavaScript file (escape sed specials)
        if [ -n "$DIFY_API_KEY" ]; then
          ESCAPED_KEY=$(printf '%s' "$DIFY_API_KEY" | sed -e 's/[\\/&]/\\&/g')
          sed -i "s/DIFY_API_KEY_PLACEHOLDER/${ESCAPED_KEY}/g" build/js/chatbot.js
          echo "‚úÖ API key placeholder replaced in chatbot.js"
        fi

        # Always generate a runtime config that the page loads before chatbot.js
        # Use Node to JSON-escape the secret safely for JS string literal
        if [ -n "$DIFY_API_KEY" ]; then
          JS_SAFE_KEY=$(node -e 'process.stdout.write(JSON.stringify(process.env.DIFY_API_KEY || ""))')
          echo "window.DIFY_API_KEY = ${JS_SAFE_KEY};" > build/js/runtime-config.js
          echo "‚úÖ Runtime config created with API key"
        else
          echo "window.DIFY_API_KEY = undefined;" > build/js/runtime-config.js
          echo "console.log('‚ö†Ô∏è Development mode: API key not available in CI');" >> build/js/runtime-config.js
          echo "‚ö†Ô∏è Runtime config created without API key"
        fi
        
        # Verify replacement was successful
        if [ -n "$DIFY_API_KEY" ]; then
          if grep -q "DIFY_API_KEY_PLACEHOLDER" build/js/chatbot.js; then
            echo "‚ùå Error: API key placeholder was not replaced"
            echo "Current content around API key:"
            grep -n "DIFY_API_KEY" build/js/chatbot.js || echo "No DIFY_API_KEY found"
            exit 1
          else
            echo "‚úÖ API key placeholder successfully replaced"
          fi
        else
          echo "‚ö†Ô∏è Skipping placeholder check - no API key available"
        fi
        
        echo "üìÑ Final file contents:"
        echo "üìÑ Chatbot.js first 10 lines:"
        head -10 build/js/chatbot.js || true
        echo "üìÑ runtime-config.js content:"
        cat build/js/runtime-config.js || true
        
        echo "üîç GitHub environment info:"
        echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
        echo "GITHUB_REF: $GITHUB_REF"
        echo "GITHUB_ACTOR: $GITHUB_ACTOR"
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './build'
        
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
